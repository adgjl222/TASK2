<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.tian.dao.StudentMapper">

    <resultMap id="studentResultMap" type="Student">
    <result property="lineId" javaType="Integer" column="line_id"></result>
    <result property="name" javaType="String" column="name"></result>
    <result property="qq" javaType="Integer" column="qq"></result>
    <result property="type" javaType="String" column="type"></result>
    <result property="estimatedTime" javaType="String" column="estimated_time"></result>
    <result property="graduateFrom" javaType="String" column="graduate_from"></result>
    <result property="logUrl" javaType="string" column="logURL"></result>
    <result property="will" javaType="string" column="will"></result>
    <result property="senior" javaType="String" column="senior"></result>
    <result property="knowFrom" javaType="String" column="know_from"></result>
    <result property="id" javaType="Integer" column="ID"></result>
    <result property="createdAt" javaType="Long" column="created_at"></result>
    <result property="updatedAt" javaType="Long" column="updated_at"></result>
    </resultMap>

    <insert id="insertStudent"  useGeneratedKeys="true" keyProperty="id" >
    INSERT INTO student(line_id,name,qq,type,estimated_time,graduate_from,
    logURL,will,senior,know_from,created_at,updated_at)
    VALUES(#{lineId},#{name},#{qq},#{type},#{estimatedTime},#{graduateFrom},
    #{logUrl},#{will},#{senior},#{knowFrom},#{createdAt},#{updatedAt})
    </insert>

    <update id="updateStudent" >
        UPDATE student
        SET type=#{type},senior= #{senior},updated_at=#{updatedAt}
        WHERE id = #{id}
    </update>

    <delete id="deleteStudentById" parameterType="int" >
         DELETE FROM student
         WHERE  ID = #{id}
     </delete>

    <select id="selectOne"  parameterType="Map" resultMap="studentResultMap">
      SELECT * FROM student WHERE  line_id = #{lineId} AND name = #{name}

    </select>



    <!-- 当有分页信息时候进行分页查询 -->
    <select id="list" resultMap="studentResultMap">
        SELECT * FROM student

            <!--limit #{page.start},#{page.count} -->
            limit 1,5
    </select>

    <!-- total表中总行数 sql语句 -->
    <select id="total" resultType="int">
        SELECT count(*) FROM student
    </select>

    <!-- 根据姓名模糊查询分页 -->
    <select id="selectStudentByName" resultMap="studentResultMap" >
    SELECT * FROM student
        <where>
        <if test="name != null and name != ''">
            and name LIKE CONCAT(CONCAT('%',#{name},'%'))
        </if>
        </where>

            <!--limit #{page.start},#{page.count} -->
        limit #{page.beginRownum},5


     </select>

    <select id="selectStudentById" resultMap="studentResultMap" parameterType="Integer" >
    SELECT * FROM student WHERE id = #{id}
     </select>



</mapper>